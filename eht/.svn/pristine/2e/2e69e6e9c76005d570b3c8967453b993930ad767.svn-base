package com.eht.subject.service.impl;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.hibernate.sql.JoinType;
import org.jeecgframework.core.common.service.impl.CommonServiceImpl;
import org.jeecgframework.core.util.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.eht.common.annotation.RecordOperate;
import com.eht.common.constant.Constants;
import com.eht.common.constant.RoleName;
import com.eht.common.constant.SynchConstants;
import com.eht.common.util.CollectionUtil;
import com.eht.common.util.UUIDGenerator;
import com.eht.group.entity.Group;
import com.eht.group.entity.GroupUser;
import com.eht.group.service.GroupService;
import com.eht.resource.entity.ClassName;
import com.eht.resource.entity.ResourceAction;
import com.eht.resource.service.ResourceActionService;
import com.eht.resource.service.ResourcePermissionService;
import com.eht.role.entity.Role;
import com.eht.role.service.RoleService;
import com.eht.subject.entity.DirectoryEntity;
import com.eht.subject.entity.SubjectEntity;
import com.eht.subject.service.DirectoryServiceI;

@Service("directoryService")
@Transactional
public class DirectoryServiceImpl extends CommonServiceImpl implements DirectoryServiceI {
	
	@Autowired
	private ResourceActionService resourceActionService;
	
	@Autowired
	private ResourcePermissionService resourcePermissionService;
	
	@Autowired
	private GroupService groupService;
	
	@Autowired
	private RoleService roleService;
	
	@Override
	@RecordOperate(dataClass="DIRECTORY", action=SynchConstants.DATA_OPERATE_ADD, keyIndex=0, keyMethod="getId", timeStamp="createTime")
	public Serializable addDirectory(DirectoryEntity dir) {
		save(dir);
		ClassName c = resourceActionService.findResourceByName(DirectoryEntity.class.getName());
		if(c == null){
			c = new ClassName();
			c.setClassName(DirectoryEntity.class.getName());
			resourceActionService.addResource(c);
		}
		long parentGroupId = 0L;
		if(!StringUtil.isEmpty(dir.getSubjectId())){
			Group group = groupService.findGroup(SubjectEntity.class.getName(), dir.getSubjectId());
			parentGroupId = group.getGroupId();
		}
		Group group = groupService.addGroup(c.getClassNameId(), dir.getId(), dir.getDirName(), dir.getId(), parentGroupId);
		grantDirectoryPermissions(dir);
		return group.getGroupId();
	}
	
	/**
	 * 为添加的目录授权
	 * @param subject
	 */
	private void grantDirectoryPermissions(DirectoryEntity dir){
		String resourceName = DirectoryEntity.class.getName();
		List<ResourceAction> list = resourceActionService.findActionsByName(resourceName);
		
		// 给owner角色授权,所有权限
		Role ownerRole = roleService.findRoleByName(RoleName.OWNER);
		int value = 0;
		for(ResourceAction ra : list){
			value |= ra.getBitwiseValue();
		}
		resourcePermissionService.grantPermissions(resourceName, dir.getId(), ownerRole.getId(), value);
		
		// 给admin角色授权,所有权限
		Role adminRole = roleService.findRoleByName(RoleName.ADMIN);
		resourcePermissionService.grantPermissions(resourceName, dir.getId(), adminRole.getId(), value);
		
	}
	
	@Override
	@RecordOperate(dataClass="DIRECTORY", action=SynchConstants.DATA_OPERATE_UPDATE, keyIndex=0, keyMethod="getId", timeStamp="updateTime")
	public void updateDirectory(DirectoryEntity dir) {
		updateEntitie(dir);
	}

	@Override
	@RecordOperate(dataClass="DIRECTORY", action=SynchConstants.DATA_OPERATE_DELETE, keyIndex=0, keyMethod="getId", timeStamp="updateTime")
	public void markDelDirectory(DirectoryEntity dir) {
		dir.setDeleted(Constants.DATA_DELETED);
		updateEntitie(dir);
	}
	
	@Override
	public DirectoryEntity restoreDirectory(DirectoryEntity dir, List<String> dirIdList) {
		if(dir.getDeleted() == Constants.DATA_DELETED){
			markDirectoryUndeleted(dir);
		}
		dirIdList.add(dir.getId());
		if(!StringUtil.isEmpty(dir.getParentId())){
			DirectoryEntity directory = getDirectory(dir.getParentId());
			if(directory!=null){
				directory.setUpdateUser(dir.getUpdateUser());
				directory.setUpdateTime(dir.getUpdateTime());
				return restoreDirectory(directory, dirIdList);
			}
			
		}
		return dir;
	}
	
	@RecordOperate(dataClass="DIRECTORY", action=SynchConstants.DATA_OPERATE_ADD, keyIndex=0, keyMethod="getId", timeStamp="updateTime")
	public void markDirectoryUndeleted(DirectoryEntity dir) {
		dir.setDeleted(Constants.DATA_NOT_DELETED);
		updateEntitie(dir);
	}
	
	@Override
	public void deleteDirectory(String id) {
		DirectoryEntity dir = getDirectory(id);
		deleteDirectory(dir);
	}
	
	@Override
	public void deleteDirectory(DirectoryEntity dir) {
		delete(dir);
		Group g = groupService.findGroup(DirectoryEntity.class.getName(), dir.getId());
		if(g != null){
			groupService.removeGUByGroupId(g.getGroupId());
			groupService.deleteGroup(g);
		}
	}

	@Override
	public DirectoryEntity getDirectory(Serializable id) {
		return get(DirectoryEntity.class, id);
	}

	@Override
	public List<DirectoryEntity> findDirsBySubject(String subjectId) {
		DetachedCriteria dc = DetachedCriteria.forClass(DirectoryEntity.class);
		dc.add(Restrictions.eq("subjectId", subjectId));
		dc.add(Restrictions.eq("deleted", Constants.DATA_NOT_DELETED));
		List<DirectoryEntity> dirList = findByDetached(dc);
		return dirList;
	}
	
	@Override
	public List<DirectoryEntity> findDirsBySubjectOderByTime(String subjectId,boolean isasc) {
		DetachedCriteria dc = DetachedCriteria.forClass(DirectoryEntity.class);
		dc.add(Restrictions.eq("subjectId", subjectId));
		dc.add(Restrictions.eq("deleted", Constants.DATA_NOT_DELETED));
		if(isasc){
			dc.addOrder( Order.asc("createTime"));
		}else{
			dc.addOrder( Order.desc("createTime"));
		}
		List<DirectoryEntity> dirList = findByDetached(dc);
		return dirList;
	}

	@Override
	public Serializable addDirectory(SubjectEntity subject, DirectoryEntity parentDir, String dirName) {
		DirectoryEntity dir = new DirectoryEntity();
		dir.setId(UUIDGenerator.uuid());
		dir.setDeleted(0);
		dir.setCreateTime(new Date());
		dir.setCreateUser(subject.getCreateUser());
		dir.setDirName(dirName);
		dir.setSubjectId(subject.getId());
		dir.setParentId(parentDir == null ? null : parentDir.getId());
		return addDirectory(dir);
	}

	@Override
	public List<DirectoryEntity> findUserDirsBySubject(String userId, String subjectId) {
		List<DirectoryEntity> dirList = findDirsBySubject(subjectId);
		for(DirectoryEntity dir : dirList){
			if(inDirBlackList(userId, dir.getId())){
				dirList.remove(dir);
			}
		}
		return dirList;
	}

	@Override
	@RecordOperate(dataClass={"DIRECTORY","DIRECTORYBLACK"}, action={SynchConstants.DATA_OPERATE_DELETE, SynchConstants.DATA_OPERATE_ADD}, keyIndex={1, 1}, targetUser={0, 0}, timeStamp={"",""}, keyMethod={"", ""})
	public void blacklistedUser(String userId, String dirId) {
		Group group = groupService.findGroup(DirectoryEntity.class.getName(), dirId);
		//将用户放入group-user关系表
		groupService.addGroupUser(group.getGroupId(), userId);
	}

	@Override
	public boolean nameExists(DirectoryEntity dir) {
		DetachedCriteria dc = DetachedCriteria.forClass(DirectoryEntity.class);
		if(!StringUtil.isEmpty(dir.getSubjectId())){
			dc.add(Restrictions.eq("subjectId", dir.getSubjectId()));
		}
		if(!StringUtil.isEmpty(dir.getParentId())){
			dc.add(Restrictions.eq("parentId", dir.getParentId()));
		}
		dc.add(Restrictions.eq("dirName", dir.getDirName()));
		dc.add(Restrictions.eq("deleted", Constants.DATA_NOT_DELETED));
		List<DirectoryEntity> dirList = findByDetached(dc);
		if(CollectionUtil.isValidateCollection(dirList)){
			DirectoryEntity dir1 = dirList.get(0);
			//新建目录
			if(dir.getId() == null || dir.getId().equals("")){
				return true;
			}else if(!dir.getId().equals(dir1.getId())){
				return true;
			}else{
				return false;
			}
		}
		return false;
	}

	@Override
	public List<DirectoryEntity> findSubDirs(String subjectId, String parentId) {
		DetachedCriteria dc = DetachedCriteria.forClass(DirectoryEntity.class);
		dc.add(Restrictions.eq("subjectId", subjectId));
		dc.add(Restrictions.eqOrIsNull("parentId", parentId));
		dc.add(Restrictions.eq("deleted", Constants.DATA_NOT_DELETED));
		List<DirectoryEntity> dirList = findByDetached(dc);
		
		return dirList;
	}
	
	@Override
	public boolean inDirBlackList(String userId, String dirId) {
		Group group = groupService.findGroup(DirectoryEntity.class.getName(), dirId);
		GroupUser gu = groupService.findGroupUser(group.getGroupId(), userId);
		return gu != null;
	}

	@Override
	@RecordOperate(dataClass={"DIRECTORY","DIRECTORYBLACK"}, action={SynchConstants.DATA_OPERATE_ADD, SynchConstants.DATA_OPERATE_DELETE}, keyIndex={1, 1}, targetUser={0, 0}, timeStamp={"",""}, keyMethod={"", ""})
	public void removeUser4lacklist(String userId, String dirId) {
		Group group = groupService.findGroup(DirectoryEntity.class.getName(), dirId);
		groupService.removeGroupUser(group.getGroupId(), userId);
	}

	@Override
	public List<DirectoryEntity> findDeletedDirs(String userId, int subjectType) {
		DetachedCriteria dc = DetachedCriteria.forClass(DirectoryEntity.class, "d");
		dc.createCriteria("subjectEntity", "s", JoinType.INNER_JOIN);
		
		dc.add(Restrictions.eq("s.subjectType", subjectType));
		dc.add(Restrictions.eq("d.createUser", userId));
		dc.add(Restrictions.eq("d.deleted", Constants.DATA_DELETED));
		List<DirectoryEntity> list = findByDetached(dc);
		return list;
	}

	@Override
	public List<DirectoryEntity> findDeletedDirs(String userId, String subjectId) {
		DetachedCriteria dc = DetachedCriteria.forClass(DirectoryEntity.class, "d");
		dc.add(Restrictions.eq("d.createUser", userId));
		dc.add(Restrictions.eq("d.deleted", Constants.DATA_DELETED));
		dc.add(Restrictions.eq("d.subjectId", subjectId));
		List<DirectoryEntity> list = findByDetached(dc);
		return list;
	}
	@Override
	public List<DirectoryEntity> findDirsByIds(String[] ids) {
		String query = "from DirectoryEntity d where id=-1 ";
		if(ids!=null&&ids.length>0){
			for(String id:ids){
				query += " or d.id = '"+id+"'"; 
			}
		}
		List<DirectoryEntity> list = findByQueryString(query);
		return list;
	}

	@Override
	public List<DirectoryEntity> findDirsBySubject(String subjectId,String userId) {
		String query="select d.* from eht_directory d where  d.subjectId='"+subjectId+"' and d.deleted="+Constants.DATA_NOT_DELETED+"  and d.id not in(select p.classpk from eht_group p , eht_group_user u where u.userid='"+userId +"' and  u.groupid=p.groupid )  order by d.createTime asc ";
		return  this.commonDao.findListbySql(query, DirectoryEntity.class);
	}

	@Override
	public void findUpDirs(String dirId,List<String> list) {
		DirectoryEntity  directoryEntity=getEntity(DirectoryEntity.class, dirId);
		if(directoryEntity.getParentId()!=null&&!directoryEntity.getParentId().equals("")){
			list.add(directoryEntity.getParentId());
			findUpDirs(directoryEntity.getParentId(),list);
		}
	}

}